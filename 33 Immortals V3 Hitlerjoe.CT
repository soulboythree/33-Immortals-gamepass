<?xml version="1.0" encoding="utf-8"?>
<CheatTable PiqueMummerTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>113779</ID>
      <Description>"𝘾𝙊𝙈𝙋𝘼𝘾𝙏 𝙈𝙊𝘿𝙀 (𝙈𝘼𝙆𝙀𝙎 𝙏𝙃𝙀 𝙈𝙀𝙉𝙐 𝙁𝙐𝙇𝙇𝙎𝘾𝙍𝙀𝙀𝙉 𝙊𝙉 𝘾𝙀)"</Description>
      <Color>4B6D8B</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

function cycleFullCompact(sender,force)
local state = not(compactmenuitem.Caption == 'Compact View Mode')
 if force~=nil then state = not force end
  compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
   getMainForm().Splitter1.Visible = state
   getMainForm().Panel4.Visible    = state
   getMainForm().Panel5.Visible    = state
end

function addCompactMenu()
 if compactmenualreadyexists then return
end

local parent = getMainForm().Menu.Items
 compactmenuitem = createMenuItem(parent)
 parent.add(compactmenuitem)
 compactmenuitem.Caption = 'Compact View Mode'
 compactmenuitem.OnClick = cycleFullCompact
 compactmenualreadyexists = 'yes'
end

addCompactMenu()
cycleFullCompact(nil,true)


[DISABLE]

cycleFullCompact(nil,false)


</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113846</ID>
      <Description>"𝘿𝙄𝙎𝘼𝘽𝙇𝙀 𝘼𝙇𝙇 𝙊𝙋𝙏𝙄𝙊𝙉𝙎"</Description>
      <Color>467086</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]

local mainHook = ('GameNameHere')
local al = getAddressList()
for i = 0, al.Count - 1 do
    if al[i].Active == true and al[i].Description ~= mainHook then al[i].Active = false
 end
end
for i = 0, al.Count - 1 do
     if al[i].Active == true  then al[i].Active = false
 end
end

if not syntaxcheck then
 synchronize(function()
   local t = createTimer()
   t.Interval,t.OnTimer = 500,function(tm)
     tm.Destroy()
     memrec.Active = false
   end
 end)
end

[DISABLE]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113880</ID>
      <Description>"𝙍𝙀𝘼𝘿 𝘽𝙀𝙁𝙊𝙍𝙀 𝙎𝘼𝙔𝙄𝙉𝙂 𝙎𝙊𝙈𝙀𝙏𝙃𝙄𝙉𝙂 𝘿𝙊𝙀𝙎𝙉'𝙏 𝙒𝙊𝙍𝙆 𝙄𝙉𝘾𝘼𝙎𝙀 𝙄𝙏 𝘿𝙊𝙀𝙎 𝙒𝙊𝙍𝙆"</Description>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>113881</ID>
      <Description>"𝙏𝙃𝙄𝙎 𝙏𝘼𝘽𝙇𝙀 𝙒𝘼𝙎 𝙈𝘼𝘿𝙀 𝙁𝙊𝙍 𝙂𝘼𝙈𝙀𝙋𝘼𝙎𝙎 𝙎𝙊 𝙄𝙏 𝙈𝙄𝙂𝙃𝙏 𝙉𝙊𝙏 𝙒𝙊𝙍𝙆 𝙊𝙉 𝙎𝙏𝙀𝘼𝙈 OR EPIC"</Description>
      <Color>8080FF</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>113905</ID>
      <Description>"----------------------------------------------------------------------------------------------------------------"</Description>
      <Color>FFFF00</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>113909</ID>
      <Description>"𝗠𝗢𝗗𝗜𝗙𝗜𝗖𝗔𝗧𝗜𝗢𝗡𝗦"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>113914</ID>
      <Description>"Godmode"</Description>
      <Color>0080FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : 33 Immortals.exe
  Version:
  Date   : 2025-03-29
  Author : Hitlerjoe

  This script forces health to stay at 10,000 when enabled.
}

[ENABLE]

aobscanmodule(INJECT,GameAssembly.dll,44 8B 30 4C 8D 8C 24 80 00 00 00) // should be unique
alloc(newmem,$1000,INJECT)

label(code)
label(return)

newmem:
  // Overwrite health with 10,000 (0x2710 in hex)
  mov [rax], 00002710  // Sets health to 10,000
code:
  mov r14d,[rax]       // Original instruction (reads health)
  lea r9,[rsp+00000080] // Original instruction
  jmp return

INJECT:
  jmp newmem
  nop 6
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 44 8B 30 4C 8D 8C 24 80 00 00 00

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113923</ID>
      <Description>"Infinite Stats(They will show as 0 on hud)"</Description>
      <Color>0080FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : 33 Immortals.exe
  Version: 
  Date   : 2025-03-29
  Author : Hitlerjoe

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,GameAssembly.dll,48 8B 40 18 EB 03 49 8B C6) // should be unique
alloc(newmem,$1000,INJECT)

label(return)

newmem:
  // Backup RAX and RCX
  push rcx
  push rax

  // Store 90,000,000 at [rax+18]
  mov ecx,90000000
  mov [rax+18],rcx      // Write to target address

  // Restore registers
  pop rax
  pop rcx

  // Original code
  mov rax,[rax+18]
  jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 48 8B 40 18 EB 03

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113922</ID>
      <Description>"Infinite Currency On Pickup(Lots of whatever you Gain)"</Description>
      <Color>00FFFF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : 33 Immortals.exe
  Version: 
  Date   : 2025-03-29
  Author : Hitlerjoe

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,GameAssembly.dll,0F 11 34 08 0F 28 74 24 30 48 83 C4 40 5F C3 48 8D 0D * * * * E8 3F)
alloc(newmem,$1000,INJECT)

label(original_code)
label(return)

newmem:
  // First let the original subtraction happen
  movups [rax+rcx],xmm6

  // Then force our value (after subtraction)
  push rax
  push rbx
  mov ebx,F4240        // Our desired value
  mov [rax+rcx],ebx     // Overwrite the result
  pop rbx
  pop rax

original_code:
  movaps xmm6,[rsp+30]
  add rsp,40
  pop rdi
  ret

INJECT:
  jmp newmem
  nop 4
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 0F 11 34 08 0F 28 74 24 30

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113927</ID>
      <Description>"Instant Complete Quests, Quest Chest, Feats (Activate then open menu for it)"</Description>
      <Color>00FFFF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : 33 Immortals.exe
  Version: 
  Date   : 2025-03-30
  Author : Hitlerjoe

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,GameAssembly.dll,8B 44 99 20 48 8B 5C 24 38) // should be unique
alloc(newmem,$1000,INJECT)

label(code)
label(return)

newmem:
  mov eax,1000000  // Set eax to 1,000,000 instead of reading from memory
  mov [rcx+rbx*4+20],eax  // Also write the value back to memory
code:
  mov rbx,[rsp+38]  // Original code after our modification
  jmp return

INJECT:
  jmp newmem
  nop 4
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 8B 44 99 20 48 8B 5C 24 38

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113942</ID>
      <Description>"^^Infinite Feat Points (Use with Instant Complete to progress 1 feat level each time)^^"</Description>
      <Color>FF80FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : 33 Immortals.exe
  Version: 
  Date   : 2025-03-31
  Author : Hitlerjoe

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(INJECT,GameAssembly.dll,8B 68 2C 48 8B 9F E8 00 00 00) // should be unique
alloc(newmem,$1000,INJECT)

label(code)
label(return)

newmem:
  mov ebp,3B9ACA00 // Set to 1 billion (0x3B9ACA00)
  mov rbx,[rdi+000000E8]
  jmp return

code:
  mov ebp,[rax+2C]
  mov rbx,[rdi+000000E8]
  jmp return

INJECT:
  jmp newmem
  nop 5
return:
registersymbol(INJECT)

[DISABLE]
INJECT:
  db 8B 68 2C 48 8B 9F E8 00 00 00

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113940</ID>
      <Description>"Max All Resources Instantly (Visually stays the same on hud until gain/lose)"</Description>
      <Color>00FFFF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,GameAssembly.dll,0F 10 04 02 48 8B C5 0F 11 45 00 48 8B 6C 24 48 48 83 C4 30 5F C3 48 8D 0D 7D)
alloc(newmem,$1000,INJECT)

label(code)
label(return)

newmem:
  // Write our value first
  mov dword [rdx+rax], 0x1869F  // 99,999

  // Then execute original code
  movups xmm0,[rdx+rax]

code:
  mov rax,rbp
  jmp return

INJECT:
  jmp newmem
  nop 2
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 0F 10 04 02 48 8B C5

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113906</ID>
      <Description>"----------------------------------------------------------------------------------------------------------------"</Description>
      <Color>FFFF00</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>PROCESS_NAME = '33 Immortals.exe'
--------
-------- Auto Attach
--------
local autoAttachTimer = nil ---- variable to hold timer object
local autoAttachTimerInterval = 1000 ---- Timer intervals are in milliseconds
local autoAttachTimerTicks = 0 ---- variable to count number of times the timer has run
local autoAttachTimerTickMax = 5000 ---- Set to zero to disable ticks max
local function autoAttachTimer_tick(timer) ---- Timer tick call back
        ---- Destroy timer if max ticks is reached
	if autoAttachTimerTickMax &gt; 0 and autoAttachTimerTicks &gt;= autoAttachTimerTickMax then
		timer.destroy()
	end
        ---- Check if process is running
	if getProcessIDFromProcessName(PROCESS_NAME) ~= nil then
		timer.destroy() ---- Destroy timer
		openProcess(PROCESS_NAME) ---- Open the process
	end
	autoAttachTimerTicks = autoAttachTimerTicks + 1 ---- Increase ticks
end
autoAttachTimer = createTimer(getMainForm()) ---- Create timer with the main form as it's parent
autoAttachTimer.Interval = autoAttachTimerInterval ---- Set timer interval
autoAttachTimer.OnTimer = autoAttachTimer_tick ---- Set timer tick call back
</LuaScript>
</CheatTable>
